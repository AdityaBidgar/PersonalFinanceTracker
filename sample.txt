import calendar
from datetime import datetime

import streamlit as st
from streamlit_option_menu import option_menu
import plotly.graph_objects as go
import json  # To load the string as JSON

import main as db 
print(dir(db)) # Assuming main contains the DB functions

# Settings
incomes = ["Salary", "Business", "Investments", "Other Income"]
expenses = ["Rent", "Utilities", "Groceries", "Car", "Entertainment", "Other Expenses"]
currency = "INR(‚Çπ)"
page_title = "Personal Finance Tracker"
page_icon = ":money_with_wings:"
layout = "centered"

st.set_page_config(page_title=page_title, page_icon=page_icon, layout=layout)
st.title(page_title + " " + page_icon)

# Time and Date
years = [datetime.today().year - i for i in range(5)]  # Changed
months = list(calendar.month_name[1:])

def get_all_periods():
    items = db.fetch_all_periods()
    print("üìå Extracted periods:", items)  # Debugging
    return items

# Hide Streamlit Style
hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_st_style, unsafe_allow_html=True)

# Navbar
selected = option_menu(
    menu_title=None,
    options=["Enter Data", "Stored Data"],
    icons=["pencil-fill", "bar-chart-fill"],
    orientation="horizontal",
)

# Input Section
if selected == "Enter Data":    
    st.header(f"Enter Data in {currency}")
    with st.form("entry_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        col1.selectbox("Select Month:", months, key="month")
        col2.selectbox("Select Year:", years, key="year")
        "---"
        
        with st.expander("Income"):
            for income in incomes:
                st.number_input(f"{income}:", min_value=0, format="%i", step=10, key=income)
        with st.expander("Expenses"):
            for expense in expenses:
                st.number_input(f"{expense}:", min_value=0, format="%i", step=10, key=expense)
        with st.expander("Comments"):
            comment = st.text_area(" ", placeholder="Add any comments or notes here...")
            
        "---"
        submitted = st.form_submit_button("Submit")
        if submitted:
            period = str(st.session_state["year"]) + "_" + str(st.session_state["month"])
            income = {income: st.session_state[income] for income in incomes}
            expense = {expense: st.session_state[expense] for expense in expenses}  # Changed variable name
            db.insert_period(period, income, expense, comment)
            st.success(f"Data for {st.session_state['month']} {st.session_state['year']} submitted successfully!")

# Plot Stored Data
if selected == "Stored Data":
    st.header("Stored Data")    
    with st.form("saved_periods"):
        period = st.selectbox("Select Period:", get_all_periods())
        submitted = st.form_submit_button("Plot Period")
        if submitted:
            period_data = db.get_period(period)
            
            if period_data:
                comment = period_data["comment"]
                incomes = period_data["incomes"]
                expenses = period_data["expenses"]

                # ‚úÖ Ensure they are dictionaries before using `.values()`
                if not isinstance(incomes, dict):
                    st.warning("‚ö†Ô∏è Warning: Income data is not in the expected format.")
                    incomes = {}

                if not isinstance(expenses, dict):
                    st.warning("‚ö†Ô∏è Warning: Expense data is not in the expected format.")
                    expenses = {}

                total_income = sum(incomes.values())  
                total_expenses = sum(expenses.values())  
                remaining_budget = total_income - total_expenses  

                col1, col2, col3 = st.columns(3)
                col1.metric("Total Income", f"{currency} {total_income}")
                col2.metric("Total Expenses", f"{currency} {total_expenses}")
                col3.metric("Remaining Budget", f"{currency} {remaining_budget}")
                st.text(f"Comment: {comment}")
            else:
                st.error("No data found for the selected period.")


       


















main.py

       import psycopg2
import psycopg2.extras
from dotenv import load_dotenv
import os
import json  # Import json for proper handling of JSON

# Load environment variables from .env
load_dotenv(".env")

# Fetch Supabase credentials from environment
USER = os.getenv("SUPABASE_USER")
PASSWORD = os.getenv("SUPABASE_PASSWORD")
HOST = os.getenv("SUPABASE_HOST")
PORT = os.getenv("SUPABASE_PORT")
DBNAME = os.getenv("SUPABASE_DBNAME")

# Connect to the Supabase PostgreSQL database
try:
    # Connect to the Supabase PostgreSQL database
    connection = psycopg2.connect(
        user=USER,
        password=PASSWORD,
        host=HOST,
        port=PORT,
        dbname=DBNAME
    )
    print("Connection to Supabase database successful!")

    cursor = connection.cursor()

    def insert_period(period, incomes, expenses, comment):
        try:
            # Use psycopg2.extras.Json to handle jsonb data
            incomes_jsonb = psycopg2.extras.Json(incomes)
            expenses_jsonb = psycopg2.extras.Json(expenses)
            
            cursor.execute(
                "INSERT INTO reports (period, incomes, expenses, comment) VALUES (%s, %s, %s, %s)",
                (period, incomes_jsonb, expenses_jsonb, comment)
            )
            connection.commit()
            print(f"‚úÖ Period {period} inserted successfully!")
        except Exception as e:
            print(f"‚ùå Failed to insert period: {e}")
            connection.rollback()


    def fetch_all_periods():
        try:
            cursor.execute("SELECT period FROM reports")
            rows = cursor.fetchall()
            
            print("üìå Raw periods fetched from DB:", rows)  # Debugging
            
            periods = [row[0] for row in rows] if rows else []
            print("‚úÖ Extracted periods:", periods)  # Debugging
            
            return periods
        except Exception as e:
            print(f"‚ùå Failed to fetch all periods: {e}")
            connection.rollback()
            return []


    # Fetch all periods
    def get_period(period):
        try:
            print(f"üìå Fetching data for period: {period}")  # Debugging
            
            cursor.execute("SELECT period, incomes, expenses, comment FROM reports WHERE period = %s", (period,))
            result = cursor.fetchone()
            
            print("üìå Raw query result:", result)  # Debugging

            if result:
                incomes = result[1] if result[1] else {}
                expenses = result[2] if result[2] else {}
                comment = result[3] if result[3] else "No comment"

                # Ensure `incomes` and `expenses` are dictionaries
                if not isinstance(incomes, dict):
                    print("‚ö†Ô∏è Warning: `incomes` is not a dictionary:", incomes)
                    incomes = {}

                if not isinstance(expenses, dict):
                    print("‚ö†Ô∏è Warning: `expenses` is not a dictionary:", expenses)
                    expenses = {}

                return {
                    "period": result[0],
                    "incomes": incomes,
                    "expenses": expenses,
                    "comment": comment,
                }
            else:
                print("‚ùå No data found for period:", period)
                return None
        except Exception as e:
            print(f"‚ùå Failed to fetch period: {e}")
            connection.rollback()
            return None

    # Data for insertion
    #period = "2023_September"
    #incomes = {"salary": 5000, "bonus": 1000}
    #expenses = {"rent": 1500, "utilities": 300}
    #comment = "Monthly report for September 2023"

    # Insert, fetch all, and get specific period
    #insert_period(period, incomes, expenses, comment)
    #   fetch_all_periods()
    #get_period(period)

    # Close the cursor and connection
  #  cursor.close()
 #   connection.close()
   # print("Connection closed.")

except Exception as e:
    print(f"Failed to connect: {e}")
